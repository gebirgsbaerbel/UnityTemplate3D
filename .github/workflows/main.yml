name: Build Project ðŸ”¨

on: 
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  release:
    types: [ published ]

jobs:

  #-----------------------------------------------------------------------------------------
  # Build Project
  #-----------------------------------------------------------------------------------------
  buildForAllSupportedPlatforms:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - StandaloneOSX # Build a macOS standalone (Intel 64-bit).
          - StandaloneWindows # Build a Windows standalone.
          - StandaloneWindows64 # Build a Windows 64-bit standalone.
          - StandaloneLinux64 # Build a Linux 64-bit standalone.
          - iOS # Build an iOS player.
          - Android # Build an Android .apk standalone app.
          - WebGL # WebGL.
        projectPath:
          - ./UnityTemplateURP
    steps:
      # Checkout
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          lfs: true

      # Cache
      - uses: actions/cache@v2
        with:
          path: ${{ matrix.projectPath }}/Library
          key: Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}
          restore-keys: |
            Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}
            Library-${{ matrix.projectPath }}
            Library-

      # Test
      #- name: Run tests
      #  uses: game-ci/unity-test-runner@v2
      #  env:
      #    UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
      #  with:
      #    githubToken: ${{ secrets.GITHUB_TOKEN }}

      # Build
      - name: Build project
        uses: game-ci/unity-builder@v2
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          projectPath: ${{ matrix.projectPath }}
          targetPlatform: ${{ matrix.targetPlatform }} 
      # Upload Build
      - name: Upload Build
        uses: actions/upload-artifact@v2
        with:
          name: Build-${{ matrix.targetPlatform }}
          path: build/${{ matrix.targetPlatform }}
      # Zip
      - name: Zip build/${{ matrix.targetPlatform }}
              uses: montudor/action-zip@v1
              if: github.event.action == 'published'
              with:
                args: zip -qq -r build/build-${{ matrix.targetPlatform }}.zip build/${{ matrix.targetPlatform }}
      # Upload build as zip file    
      - name: Upload build-${{ matrix.targetPlatform }}.zip to GitHub Release
              uses: svenstaro/upload-release-action@v2
              if: github.event.action == 'published'
              with:
                repo_token: ${{ secrets.GH_CREDENTIALS }}
                asset_name: build-${{ matrix.targetPlatform }}.zip
                file: build/build-${{ matrix.targetPlatform }}.zip
                tag: ${{ github.ref }}
                overwrite: true
                body: ${{ github.event.release.body }}

#-----------------------------------------------------------------------------------------
# Deploy to itch.io
#-----------------------------------------------------------------------------------------
release_windows_to_itch:
  name: Release Windows (64-Bit) to itch.io
  runs-on: ubuntu-latest
  needs: buildWithLinux
  if: github.event.action == 'published'
  steps:
    - name: download Windows 64
      id: download-windows64
      uses: dsaltares/fetch-gh-release-asset@master
      with:
        version: "latest"
        file: build-StandaloneWindows64.zip
        token: ${{ secrets.GH_CREDENTIALS }}"
    - name: deploy to itch.io (Windows 64)
      uses: josephbmanley/butler-publish-itchio-action@master
      env:
        BUTLER_CREDENTIALS: ${{ secrets.BUTLER_CREDENTIALS }}
        CHANNEL: windows
        ITCH_GAME:
        ITCH_USER:
        PACKAGE: build-StandaloneWindows64.zip
        VERSION: ${{ steps.download-windows64.outputs.version }}